** Dockemacs - the minimal emacs noX
[[https://coveralls.io/github/AfsmNGhr/dockemacs?branch=master][https://coveralls.io/repos/github/AfsmNGhr/dockemacs/badge.svg?branch=master]]
[[https://travis-ci.org/AfsmNGhr/dockemacs][https://travis-ci.org/AfsmNGhr/dockemacs.svg?branch=master]]
[[https://microbadger.com/images/afsmnghr/dockemacs][https://images.microbadger.com/badges/version/afsmnghr/dockemacs.svg]]
[[https://microbadger.com/images/afsmnghr/dockemacs][https://images.microbadger.com/badges/image/afsmnghr/dockemacs.svg]]
[[https://hub.docker.com/r/afsmnghr/dockemacs/][https://img.shields.io/docker/pulls/afsmnghr/dockemacs.svg?style=flat-square]]
[[https://hub.docker.com/r/afsmnghr/dockemacs/][https://img.shields.io/docker/stars/afsmnghr/dockemacs.svg?style=flat-square]]

[[https://i.imgur.com/wmDvJbq.png?1]]

*** Table of Contents                                                 :TOC:
+ [[#installation][Installation]]
  - [[#install-docker-engine][Install Docker Engine]]
  - [[#add-alias][Alias]]
  - [[#prepare-homedockemacs-check-your-env][Prepare Variables]]
  - [[#setup-ssh-daemon-and-restart][Setup ssh Daemon]]
  - [[#add-ssh-key-to-authorized_keys][Ssh Key]]
  - [[#run-and-wait-until-the-boot][Run]]
+ [[#wrappers-for-container-workflow][Wrappers]]
  - Web browser
  - Docker
  - [[#bundle][Bundle]]
  - [[#rubocop][Rubocop]]
  - [[#node][node]]
  - [[#tslint][tslint]]
  - [[#pylint][Pylint]]
+ [[#configurations][Configurations]]
  - [[#initialize][Initialize]]
  - [[#package-management][Package Management]]
    - use-package
  - [[#encoding][Encoding]]
  - [[#indentation][Indentation]]
  - [[#autopair][Autopair]]
  - [[#whitespace][Whitespace]]
  - [[#interface][Interface]]
    + [[#themes][Themes]]
      - [[#spolsky][Spolsky]]
      - [[#spolsky-term][Spolsky Term]]
  - [[#history][History]]
  - [[#backups][Backups]]
  - [[#completion][Completion]]
    - [[#ido][IDO]]
    - [[#company][Company]]
  - [[#recent-files][Recent files]]
  - [[#bookmarks][Bookmarks]]

*** Installation

**** [[https://docs.docker.com/engine/installation/][Install Docker Engine]]:
**** Create emacs data volume:

#+begin_src sh :tangle no
docker volume create emacs_data
#+end_src

**** Add alias:

#+begin_src sh :tangle no
# ~/.bash_aliases or etc ...

alias dockemacs='
  docker run -it --rm --net=host \
       --env-file $HOME/.dockemacs \
       --entrypoint initialize "$@" \
       -v $HOME:/mnt/workspace \
       -v emacs_data:/home/emacser/.emacs.d \
       -v /etc/localtime:/etc/localtime:ro \
       afsmnghr/dockemacs:1.7.0 startup
'
#+end_src

**** Prepare =$HOME/.dockemacs=, check your =env=:

#+begin_src sh :tangle no
  echo "UID=$(id -u)" >> $HOME/.dockemacs
  echo "GID=$(id -g)" >> $HOME/.dockemacs
  echo "UNAME=emacser" >> $HOME/.dockemacs
  echo "GNAME=emacs" >> $HOME/.dockemacs
  echo "HOME=/home/emacser" >> $HOME/.dockemacs
  echo "WORKSPACE=/mnt/workspace" >> $HOME/.dockemacs
  echo "SHELL=/bin/bash" >> $HOME/.dockemacs
  echo "TERM=xterm-256color" >> $HOME/.dockemacs
  echo "ORG_FILES=Documents/org/" >> $HOME/.dockemacs
  echo "HOST_USER=afsmnghr" >> $HOME/.dockemacs
  echo "HOST_IP=127.1" >> $HOME/.dockemacs # only work with --net=host
  echo "HOST_PORT=22" >> $HOME/.dockemacs
  echo "DISPLAY=:0.0" >> $HOME/.dockemacs
  echo "WEB_BROWSER=chromium" >> $HOME/.dockemacs
  echo "REPOSITORY=git@github.com:AfsmNGhr/dockemacs.git" >> $HOME/.dockemacs
#+end_src

    * =UID= and =GID= - transparent permissions
    * =UNAME= and =GNAME= - user & group name in container
    * =HOME= - rewrite home path for new user
    * =WORKSPACE= - mount path from host
    * =SHELL= - default shell
    * =TERM= - set terminal env
    * =ORG_FILES= - only relative path
    * =HOST_USER=, =HOST_IP=, =HOST_PORT= - remote management through ssh
    * =DISPLAY= - for GUI application
    * =WEB_BROWSER= - setup browser for emacs
    * =REPOSITORY= - our repository dotemacs (first clone)

**** Setup ssh daemon and restart:

#+begin_src sh :tangle no
# /etc/ssh/sshd_config

ListenAddress 127.1
#+end_src

**** Add ssh key to authorized_keys:

#+begin_src sh :tangle no
ssh-copy-id "$HOST_USER@$HOST_IP" -p "$HOST_PORT"
#+end_src

**** Run and wait until the boot:

#+begin_src sh :tangle no
$ dockemacs
#+end_src

*** Wrappers for container workflow

- =WEB_BROWSER= from =env= with =DISPLAY=
- [[https://docs.docker.com/][Docker]]

**** [[http://bundler.io/][Bundle]]

#+begin_src elisp :tangle no
;; .dir-locals.el in root project

((nil . ((eval .
               (progn
                 (setenv "PROJECT_LOCAL_PATH" "/mnt/workspace/local/path")
                 ;; local path in dockemacs container
                 (setenv "PROJECT_REMOTE_PATH" "/remote/path")
                 ;; remote path in project container
                 (setenv "PROJECT_BUNDLE_CMD" "docker exec -it PROJECT_CONTAINER bundle"))))))
#+end_src

**** [[https://github.com/bbatsov/rubocop][Rubocop]]

#+begin_src elisp :tangle no
;; .dir-locals.el in root project

((nil . ((eval .
               (progn
                 (setenv "PROJECT_LOCAL_PATH" "/mnt/workspace/local/path")
                 ;; local path in dockemacs container
                 (setenv "PROJECT_REMOTE_PATH" "/remote/path")
                 ;; remote path in project container
                 (setenv "PROJECT_RUBOCOP_CMD" "docker exec -it PROJECT_CONTAINER rubocop"))))))
#+end_src

**** [[https://nodejs.org/][node]]

#+begin_src elisp :tangle no
;; .dir-locals.el in root project

((nil . ((eval .
               (progn
                 (setenv "PROJECT_LOCAL_PATH" "/mnt/workspace/local/path")
                 ;; local path in dockemacs container
                 (setenv "PROJECT_REMOTE_PATH" "/remote/path")
                 ;; remote path in project container
                 (setenv "PROJECT_NODE_CMD" "docker exec -it PROJECT_CONTAINER node"))))))
#+end_src

**** [[https://www.npmjs.com/package/tslint][tslint]]

#+begin_src elisp :tangle no
;; .dir-locals.el in root project

((nil . ((eval .
               (progn
                 (setenv "PROJECT_LOCAL_PATH" "/mnt/workspace/local/path")
                 ;; local path in dockemacs container
                 (setenv "PROJECT_REMOTE_PATH" "/remote/path")
                 ;; remote path in project container
                 (setenv "PROJECT_TSLINT_CMD" "docker exec -it PROJECT_CONTAINER tslint")
                 ;; container workflow
                 (setenv "PROJECT_TSLINT_CMD" "cd /remote/path && /$(npm bin)/tslint")
                 ;; host application
)))))
#+end_src

**** [[https://www.pylint.org/][Pylint]]

#+begin_src elisp :tangle no
;; .dir-locals.el in root project

((nil . ((eval .
               (progn
                 (setenv "PROJECT_LOCAL_PATH" "/mnt/workspace/local/path")
                 ;; local path in dockemacs container
                 (setenv "PROJECT_REMOTE_PATH" "/remote/path")
                 ;; remote path in project container
                 (setenv "PROJECT_PYLINT_CMD" "docker exec -it PROJECT_CONTAINER pylint"))))))
#+end_src

*** Configurations

**** Initialize

Set lexical scoping for the init-file.

#+begin_src elisp
;;; -*- lexical-binding: t -*-
#+end_src

**** Package Management

The =use-package= declarative and performance-oriented.

#+begin_src elisp
(require 'package)
(package-initialize)

(setq package-enable-at-startup nil
      package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")))

(unless (version< emacs-version "25.1")
  (setq package-archive-priorities '(("melpa-stable" . 10)
                                     ("gnu" . 10)
                                     ("melpa" . 20))))
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)

(setq use-package-verbose t
      use-package-always-ensure t)
#+end_src

**** Encoding

Set utf-8 everywhere.

#+begin_src elisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq buffer-file-coding-system 'utf-8
      file-name-coding-system 'utf-8
      x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

**** Indentation

Prefer space indentation.

#+begin_src elisp
(setq tab-width 2
      tab-always-indent 'complete
      indent-tabs-mode nil)
#+end_src

**** Autopair

#+begin_src elisp
(setq electric-pair-pairs '((?\" . ?\")
                            (?\` . ?\`)
                            (?\( . ?\))
                            (?\{ . ?\})))

(electric-pair-mode 1)
#+end_src

**** Whitespace

#+begin_src elisp
(custom-set-variables
 '(whitespace-style '(face lines-tail))

(global-whitespace-mode t)
#+end_src

**** Interface

Set custom file and few variables.

#+begin_src elisp
(setq custom-file (concat user-emacs-directory "custom.el")

(custom-set-variables
 '(org-babel-load-languages
   (quote ((emacs-lisp . t) (sh . t) (ruby . t) (js . t))))
 '(org-confirm-babel-evaluate nil))
#+end_src

Short, answering yes or no.

#+begin_src elisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Clear UI.

#+begin_src elisp
(menu-bar-mode -1)
(if tool-bar-mode
    (tool-bar-mode -1))
(column-number-mode -1)
(blink-cursor-mode -1)
(line-number-mode -1)
(size-indication-mode -1)
(setq ring-bell-function 'ignore)
#+end_src

Time in the modeline.

#+begin_src elisp
(display-time-mode)
(setq display-time-interval 1
      display-time-format "%H:%M")
#+end_src

Dialogs stay in emacs.

#+begin_src elisp
(setq use-dialog-box nil
      use-file-dialog nil
      epa-pinentry-mode 'loopback)
#+end_src

Enable build-in modes.

#+begin_src elisp
(global-visual-line-mode t)
(global-font-lock-mode t)
(global-auto-revert-mode t)
(delete-selection-mode t)
(global-linum-mode t)
(auto-fill-mode 1)
#+end_src

***** Themes

Load my themes. Enable theme on the frame type.

#+begin_src elisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

(defun my/load-theme ()
  "load my theme"
  (if (display-graphic-p)
      (load-theme 'spolsky t)
    (load-theme 'spolsky-term t)))

(defun my/enable-theme (frame)
  "enable theme the current frame depending on the frame type"
  (with-selected-frame frame
    (if (window-system)
        (progn
          (unless (custom-theme-enabled-p 'spolsky)
            (if (custom-theme-enabled-p 'spolsky-term)
                (disable-theme 'spolsky-term))
            (enable-theme 'spolsky)))
      (progn
        (unless (custom-theme-enabled-p 'spolsky-term)
          (if (custom-theme-enabled-p 'spolsky)
              (disable-theme 'spolsky))
          (enable-theme 'spolsky-term))))))

(add-hook 'after-init-hook 'my/load-theme)
(add-hook 'after-make-frame-functions 'my/enable-theme)
#+end_src

****** Spolsky

[[file:images/spolsky-theme.png]]

****** Spolsky Term

[[file:images/spolsky-term-theme.png]]

**** History

#+begin_src elisp
(setq history-length t
      history-delete-duplicates t
      savehist-save-minibuffer-history 1
      savehist-autosave-interval 60
      savehist-additional-variables '(search-ring regexp-search-ring
                                                  comint-input-ring))

(savehist-mode 1)
#+end_src

**** Backups

#+begin_src elisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups"))
      auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t))
      delete-old-versions t
      version-control t
      vc-make-backup-files t
      backup-by-copying t
      kept-new-versions 2
      kept-old-versions 2)
#+end_src

**** Completion

***** IDO

Enable [[https://www.emacswiki.org/emacs/InteractivelyDoThings][ido]] (or “Interactively DO things”) everywhere.

#+begin_src elisp
(use-package ido-hacks
  :config
  (use-package flx-ido
    :config
    (ido-mode 1)
    (ido-everywhere 1)
    (flx-ido-mode 1)
    (setq ido-enable-flex-matching t
          ido-use-faces t
          ido-virtual-buffers t
          ido-auto-merge-delay-time 99999999))
  (use-package ido-completing-read+ :pin melpa-stable
    :config (ido-ubiquitous-mode 1)))
#+end_src

***** Company

Use [[http://company-mode.github.io/][modern completion framework]].

#+begin_src elisp
(use-package company :defer 30
  :init (global-company-mode t)
  :config
  (defvar company-mode/enable-yas t
    "Enable yasnippet for all backends.")

  (defun company-mode/backend-with-yas (backend)
    (if (or (not company-mode/enable-yas)
            (and (listp backend)
                 (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends
        (mapcar #'company-mode/backend-with-yas
                '((company-capf company-shell company-dabbrev company-abbrev
                                company-files company-gtags company-etags
                                company-keywords)))
        company-idle-delay 1.0
        company-tooltip-flip-when-above t)
  (use-package company-flx :defer t
    :config (with-eval-after-load 'company
              (company-flx-mode +1)))
  (use-package company-ycmd :defer t
    :config (company-ycmd-setup))
  (use-package company-shell :defer t)
  (use-package company-statistics :defer t
    :init (company-statistics-mode)))
#+end_src

**** Recent files

#+begin_src elisp
(use-package recentf
  :init (recentf-mode 1)
  :config
  (setq recentf-max-saved-items 30
        recentf-keep '(file-remote-p file-readable-p))

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to find a recent file."
    (interactive)
    (find-file (ido-completing-read "Open recent file: " recentf-list nil t)))

  (global-set-key (kbd "C-c r") 'ido-recentf-open))
#+end_src

**** Bookmarks

#+begin_src elisp
(use-package bookmark
  :config
  (setq bookmark-save-flag t)
  (global-set-key (kbd "C-x r b")
                  (lambda ()
                    (interactive)
                    (bookmark-jump
                     (ido-completing-read "jump to bookmark: "
                                          (bookmark-all-names))))))
#+end_src
